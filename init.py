from flask import Flask, request, render_template_string
import google.generativeai as genai

# Cl√© API Gemini
genai.configure(api_key="AIzaSyB434P__wR_o_rr5Q3PjOULqyKhMANRtgk")

app = Flask(__name__)

# üìå PROMPT ULTRA OPTIMIS√â
def generate_performance_prompt(subject, tone):
    return f"""
Tu es un expert de LinkedIn, sp√©cialis√© dans les posts viraux qui performent avec l‚Äôalgorithme 2025.

R√©dige un post LinkedIn optimis√© sur : "{subject}"

Respecte strictement ces consignes :

1. Accroche percutante dans les **2 premi√®res lignes** (positive, n√©gative ou personnelle)
2. R√©dige en **paragraphes courts**, avec **sauts de ligne** fr√©quents
3. Longueur : entre **900 et 1200 caract√®res** (pas plus)
4. Ton : {tone}, authentique, conversationnel, humain
5. **Aucune mention de lien externe**
6. Termine par une **question engageante** simple qui pousse √† commenter
7. Le contenu doit √™tre **√©ducatif**, **inspirant**, **personnel**, ou **utile**
8. Index de lisibilit√© entre 0 et 4 (accessible √† tous)
9. Tu peux utiliser **puces ou √©mojis**, mais avec mod√©ration
10. Tu conclueras par 3/4 hashtags en rapport

Objectif : g√©n√©rer du **temps de lecture √©lev√©**, **des commentaires** et **des sauvegardes**.

R√©dige un post complet, sans aucun titre, ni signature, ni lien. Commence directement par l‚Äôaccroche.
"""

# üñ• Interface HTML modifi√©e avec champ <textarea>
TEMPLATE = '''
<!doctype html>
<html>
<head>
  <title>Post LinkedIn Optimis√©</title>
    <style>
      textarea { width: 100%; height: 300px; font-size: 16px; line-height: 1.5; }
      input[type="submit"] { font-size: 18px; padding: 6px 12px; }
    </style>
</head>
<body>
<h1>‚ú® G√©n√©rateur de Post LinkedIn optimis√© (2025)</h1>
<form method=post>
  Sujet du post :<br>
  <input type=text name=subject size=80 required value="{{ subject or '' }}"><br><br>

  Ton :<br>
  <select name="tone">
    <option value="professionnel" {% if tone == 'professionnel' %}selected{% endif %}>Professionnel</option>
    <option value="inspirant" {% if tone == 'inspirant' %}selected{% endif %}>Inspirant</option>
    <option value="personnel" {% if tone == 'personnel' %}selected{% endif %}>Personnel</option>
    <option value="conversationnel" {% if tone == 'conversationnel' %}selected{% endif %}>Conversationnel</option>
  </select><br><br>

  <input type=submit value="G√©n√©rer le post">
</form>

{% if post %}
<hr>
<h2>üí¨ Post g√©n√©r√© :</h2>
<form method="post">
  <textarea name="edited_post">{{ post }}</textarea><br><br>
  <input type="submit" value="Modifier manuellement uniquement">
</form>
{% endif %}
</body>
</html>
'''

@app.route("/", methods=["GET", "POST"])
def index():
    post = ""
    subject = ""
    tone = "inspirant"

    if request.method == "POST":
        # Si l'utilisateur modifie le texte √† la main (sans reg√©n√©ration)
        if request.form.get("edited_post"):
            post = request.form.get("edited_post", "")
            subject = request.form.get("subject", "")
            tone = request.form.get("tone", "inspirant")
        else:
            subject = request.form.get("subject", "")
            tone = request.form.get("tone", "inspirant")
            try:
                prompt = generate_performance_prompt(subject, tone)
                model = genai.GenerativeModel("gemini-1.5-pro")
                response = model.generate_content(prompt)
                post = response.text.strip()
            except Exception as e:
                post = f"Erreur lors de la g√©n√©ration : {e}"

    return render_template_string(TEMPLATE, post=post, subject=subject, tone=tone)

if __name__ == "__main__":
    app.run(debug=True)
